var documenterSearchIndex = {"docs":
[{"location":"generated/intro/toposeries/","page":"Plotting","title":"Plotting","text":"EditURL = \"../../../literate/intro/toposeries.jl\"","category":"page"},{"location":"generated/intro/toposeries/#Interactive-topoplots","page":"Plotting","title":"Interactive topoplots","text":"","category":"section"},{"location":"generated/intro/toposeries/","page":"Plotting","title":"Plotting","text":"These topoplots series are different: instead fo voltage they represent pattern detection value (here - entropy) for different sorting variables.","category":"page"},{"location":"generated/intro/toposeries/","page":"Plotting","title":"Plotting","text":"By clicking on the markers you can see the channel name and sorted variabel in title.","category":"page"},{"location":"generated/intro/toposeries/","page":"Plotting","title":"Plotting","text":"using CairoMakie\nusing DataFrames\nusing UnfoldMakie\nusing JLD2\nusing ERPgnostics\nCairoMakie.activate!()","category":"page"},{"location":"generated/intro/toposeries/","page":"Plotting","title":"Plotting","text":"Data input","category":"page"},{"location":"generated/intro/toposeries/","page":"Plotting","title":"Plotting","text":"path = dirname(dirname(Base.current_project()))\ninclude(path * \"/docs/example_data.jl\")\n\npositions_128 = JLD2.load_object(path * \"/data/positions_128.jld2\")\npattern_detection_values = example_data();\nnothing #hide","category":"page"},{"location":"generated/intro/toposeries/","page":"Plotting","title":"Plotting","text":"Interactive topoplot series with one row","category":"page"},{"location":"generated/intro/toposeries/","page":"Plotting","title":"Plotting","text":"desired_conditions = [\"duration\", \"fix_avgpos_x\", \"fix_avgpos_y\", \"fix_avgpupilsize\"]\ninter_toposeries(\n    filter(row -> row.condition in desired_conditions, pattern_detection_values);\n    positions = positions_128,\n)","category":"page"},{"location":"generated/intro/toposeries/","page":"Plotting","title":"Plotting","text":"Interactive topoplot series with multiple rows","category":"page"},{"location":"generated/intro/toposeries/","page":"Plotting","title":"Plotting","text":"inter_toposeries(\n    pattern_detection_values;\n    positions = positions_128,\n    toposeries_configs = (; nrows = 4),\n    figure_configs = (; size = (1500, 1200)),\n)","category":"page"},{"location":"generated/intro/toposeries/","page":"Plotting","title":"Plotting","text":"","category":"page"},{"location":"generated/intro/toposeries/","page":"Plotting","title":"Plotting","text":"This page was generated using Literate.jl.","category":"page"},{"location":"api/","page":"API / DocStrings","title":"API / DocStrings","text":"Modules = [ERPgnostics]\nOrder   = [:function]","category":"page"},{"location":"api/#ERPgnostics.basis_hanning-Tuple{Any, Any}","page":"API / DocStrings","title":"ERPgnostics.basis_hanning","text":"basis_hanning(evts, maxlength)\n\nSimulate Hanning basis. Creates ERP pattern called symmetrical fan V.\n\nArguments\n\nevts::DataFrame\n  tmp\nmaxlength::DataFrame\n  tmp\n\nReturn Value: basis. \n\n\n\n\n\n","category":"method"},{"location":"api/#ERPgnostics.basis_linear-Tuple{Any, Any}","page":"API / DocStrings","title":"ERPgnostics.basis_linear","text":"basis_linear(evts, maxlength)\n\nSimulate linear basis. Create abline EPR pattern /.\n\nArguments\n\nevts::DataFrame\n  tmp\nmaxlength::DataFrame\n  tmp\n\nReturn Value: basis. \n\n\n\n\n\n","category":"method"},{"location":"api/#ERPgnostics.basis_lognormal-Tuple{Any, Any}","page":"API / DocStrings","title":"ERPgnostics.basis_lognormal","text":"basis_lognormal(evts, maxlength)\n\nSimulate lognormal basis. Creates ERP pattern called asymetrical fan |/.\n\nArguments\n\nevts::DataFrame\n  tmp\nmaxlength::DataFrame\n  tmp\n\nReturn Value: basis. \n\n\n\n\n\n","category":"method"},{"location":"api/#ERPgnostics.complex_pattern_detector-Tuple{Union{Array{Float64, 3}, Matrix{Float64}}, Union{DataFrame, Vector{Float64}}, Function, Function}","page":"API / DocStrings","title":"ERPgnostics.complex_pattern_detector","text":"complex_pattern_detector(erp_data::Array{Float64, 3}, filter::Function, detector::Function; mode = \"basic\", n_permutations = 10)\n\nPattern detector.\nBasic mode:\n- For each channel and soring variable, use the `complex_pattern' function.\n\nMode of permuted means:\n- Create a data set of detector values based on given data, but shuffled randomly.\n- Compute detector values for given data over each channel and sort value.\n- Find the absolute difference between erp_data and shaffled_data.\n\n\nArguments\n\nerp_data::Array{Float64, 3}\n  3-dimensional Array of voltages of Event-related potentials. Dimensions: time of recording, trials, channels. \ndetector::Function`\n  Function used for pattern detection.\n  For example, Images.entropy from Images.jl.\nfilter::Function`\n  Function used for smearing.- kwargs...\n  Additional styling behavior. \n\n\nKeyword arguments (kwargs)\n\nn_permutations::Number = 10 \n  Number fo permutations. Useful for mode \"permuted_means\" where it defines number of random permutations before averaging.\nmode::String = \"basic\"` \n  With the \"permuted_means\" mode, results are given as the absolute value between the detector result over the given data set and the randomly permuted data set.\n\nReturn Value: DataFrame with pattern detection values. Dimensions: experimental events, channels.\n\n\n\n\n\n","category":"method"},{"location":"api/#ERPgnostics.inter_heatmap-Tuple{DataFrame}","page":"API / DocStrings","title":"ERPgnostics.inter_heatmap","text":"inter_heatmap(pattern_detection_values::DataFrame)\n\nPlot interactive heatmap with channels on x-axis and index of event variable on y-axis.\n\nArguments\n\npattern_detection_values::DataFrame\n  DataFrame with columns condition and estimate. Each condition is a value on y-axis. \nkwargs...\n  Additional styling behavior. \n\n\nReturn Value: Interactive Figure displaying heatmap.\n\n\n\n\n\n","category":"method"},{"location":"api/#ERPgnostics.inter_heatmap_image-Tuple{DataFrame, DataFrame, Array{Float64, 3}}","page":"API / DocStrings","title":"ERPgnostics.inter_heatmap_image","text":"inter_heatmap_image(pattern_detection_values::DataFrame, events::DataFrame, erps::Array{Float64, 3})\n\nPlot heatmap and interactive ERP image.\nHeatmap will have channels on x-axis and index of event variable on y-axis.\nERP image will have trials on y-axis and time on x-axis\n\nArguments\n\npattern_detection_values::DataFrame\n  DataFrame with columns condition and estimate. Each condition is a value on y-axis.\nevents::DataFrame\n  DataFrame with columns of experimental events and rows with trials. Each value is an event value in a trial.\nerps::Array{Float64, 3}\n  3-dimensional Array of voltages of Event-related potentials. Dimensions: channels, time of recording, trials. \nkwargs...\n  Additional styling behavior. \n\n\nReturn Value: Interactive Figure displaying topoplot series and interactive ERP image.\n\n\n\n\n\n","category":"method"},{"location":"api/#ERPgnostics.inter_toposeries-Tuple{DataFrame}","page":"API / DocStrings","title":"ERPgnostics.inter_toposeries","text":"inter_toposeries(pattern_detection_values::DataFrame; positions::Vector{Point{2, Float64}} = positions_128)\n\nPlot interactive topoplot series.\n\nArguments\n\npattern_detection_values::DataFrame\n  DataFrame with columns condition and estimate. Each condition is resposible for a topoplot. Estimates will be projected across channels. \nfigure_configs::NamedTuple = (;)\n  Here you can flexibly change configurations of the Figure axis.\n  To see all options just type ?Figure in REPL.\n\ntoposeries_configs::NamedTuple  = (;)\n  Here you can flexibly change configurations of the topoplot series.\n  To see all options just type ?plot_topoplotseries in REPL.\n  Defaults: (nrows = 1, collabels = true, mapping = (col = :condition,), axis = (xlabel = \"Conditions\", xlabelvisible = false), visual = (labelscatter = (markersize = 10, strokewidth = 2), contours = (levels = 0,), colormap = Reverse{Symbol}(:RdGy4)), colorbar = (label = \"Pattern detection function value\", colorrange = (0, 1), height = 300), layout = (usecolorbar = true,))\nkwargs...\n  Additional styling behavior. \n\n\nKeyword arguments (kwargs)\n\npositions::Vector{Point{2, Float64}} = positions_128 \n  Array of topoplot coordinates for channels.\n\nReturn Value: Interactive Figure displaying topoplot series.\n\n\n\n\n\n","category":"method"},{"location":"api/#ERPgnostics.inter_toposeries_image-NTuple{4, Any}","page":"API / DocStrings","title":"ERPgnostics.inter_toposeries_image","text":"inter_toposeries_image(pattern_detection_values::DataFrame, events::DataFrame, erps::Array{Float64, 3}, timing; positions::Vector{Point{2, Float64}} = positions_128)\n\nPlot interactive topoplot series and interactive ERP image.\nERP image will have trials on y-axis and time on x-axis\n\nArguments\n\npattern_detection_values::DataFrame\n  DataFrame with columns condition and estimate. Each condition is resposible for a topoplot. Estimates will be projected across channels. \nevents::DataFrame\n  DataFrame with columns of experimental events and rows with trials. Each value is an event value in a trial.\nerps::Array{Float64, 3}\n  3-dimensional Array of voltages of Event-related potentials. Dimensions: channels, time of recording, trials. \ntiming::?\n  Timing of recording. Should be similar to y-value of erps. \nfigure_configs::NamedTuple = (;)\n  Here you can flexibly change configurations of the Figure axis.\n  To see all options just type ?Figure in REPL.\n\ntoposeries_configs::NamedTuple  = (;)\n  Here you can flexibly change configurations of the topoplot series.\n  To see all options just type ?plot_topoplotseries in REPL.\n  Defaults: (nrows = 1, collabels = true, mapping = (col = :condition,), axis = (xlabel = \"Conditions\", xlabelvisible = false), visual = (labelscatter = (markersize = 10, strokewidth = 2), contours = (levels = 0,), colormap = Reverse{Symbol}(:RdGy4)), colorbar = (label = \"Pattern detection function value\", colorrange = (0, 1), height = 300), layout = (usecolorbar = true,))\nerpimage_configs::NamedTuple  = (;)\n  Here you can flexibly change configurations of the ERP image plot.\n  To see all options just type ?plot_erpimage in REPL.\n  Defaults: (show_sortval = true, meanplot = true, axis = (title = \"ERP image\",))\nkwargs...\n  Additional styling behavior. \n\n\nKeyword arguments (kwargs)\n\npositions::Vector{Point{2, Float64}} = positions_128 \n  Array of topoplot coordinates for channels.\n\nReturn Value: Interactive Figure displaying topoplot series and interactive ERP image.\n\n\n\n\n\n","category":"method"},{"location":"api/#ERPgnostics.pattern_detector-Tuple{Matrix{Float64}, Function, Function}","page":"API / DocStrings","title":"ERPgnostics.pattern_detector","text":"pattern_detector(erp_data::Matrix{Float64}, filter::Function, detector::Function; mode = \"plot\")\n\nPattern detector for 2D dataframes.\nFor instance, single EEG channel (sensor) with trials over time.\n Method:\n- Filter dataset for smearing.\n- Use pattern detection function.\n- In \"plot\" mode returns an ERP image with a value of pattern detection. Otherwise - only value.\n\nArguments\n\nerp_data::Matrix{Float64}`\n  3-dimensional array of voltages of event-related potentials. Dimensions: channels, recording time, trials. \ndetector::Function`\n  Function used for pattern detection.\n  For example, Images.entropy from Images.jl.\nfilter::Function`\n  Function used for smearing.\n\n\nKeyword arguments (kwargs)\n\nmode::String = \"plot\"` \n  Plot an ERP image with the pattern detection value.\n\nReturn Value: (Figure with) pattern detection value.\n\n\n\n\n\n","category":"method"},{"location":"api/#ERPgnostics.simulate_6patterns","page":"API / DocStrings","title":"ERPgnostics.simulate_6patterns","text":"simulate_6patterns(μ = 3.2, σ = 0.5)\n\nSimulate 6 ERP patterns in one dataset.\nSimulated patterns: Sigmoid, One-sided fan, Two-sided fan, Diverging bar, Hourglass bar, Tilted bar.\nColumns in resulting sim_6patterns Data Frame to simulate this patterns: Δlatency, duration, durationB, iscar, continuous, duration_linear.\n\nArguments\n\nμ::Float = 0.5\n  Controls mean.\nσ::Float = 3.2\n  Controls standart deviation.\n\nReturn Value: sim_6patterns::Matrix{Float64} with voltages and sim_evts::DataFrame with events. \n\n\n\n\n\n","category":"function"},{"location":"api/#ERPgnostics.supportive_defaults-Tuple{Symbol}","page":"API / DocStrings","title":"ERPgnostics.supportive_defaults","text":"supportive_defaults(cfg_symb::Symbol)\n\nDefault configurations for the supporting axis. Similar to PlotConfig, but these configurations are not shared by all plots.\nSuch supporting axes allow users to flexibly see defaults in docstrings and manipulate them using corresponding axes.\n\nFor developers: to make them updateable in the function, use update_axis. Return value: NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"api/#ERPgnostics.truncate_basisfunction-Tuple{Any, Any}","page":"API / DocStrings","title":"ERPgnostics.truncate_basisfunction","text":"truncate_basisfunction(evts, maxlength)\n\nCheck that all bases have maxlength by appending or truncating.\n\nArguments\n\nevts::DataFrame\n  tmp\nmaxlength::DataFrame\n  tmp\n\nReturn Value: basis. \n\n\n\n\n\n","category":"method"},{"location":"api/#ERPgnostics.update_axis-Tuple{NamedTuple}","page":"API / DocStrings","title":"ERPgnostics.update_axis","text":"update_axis(support_axis::NamedTuple; kwargs...)\n\nUpdate values of NamedTuple{key = value}.\nUsed for supportive axes to make users be able to flexibly change them.\n\n\n\n\n\n","category":"method"},{"location":"api/","page":"API / DocStrings","title":"API / DocStrings","text":"Internally, we use a PlotConfig struct to keep track of common plotting options, so that all functions have a similar API.","category":"page"},{"location":"generated/intro/gnostics/","page":"Diagnostics","title":"Diagnostics","text":"EditURL = \"../../../literate/intro/gnostics.jl\"","category":"page"},{"location":"generated/intro/gnostics/","page":"Diagnostics","title":"Diagnostics","text":"using CairoMakie\nusing DataFrames\nusing UnfoldMakie\nusing JLD2\nusing ERPgnostics\nCairoMakie.activate!()","category":"page"},{"location":"generated/intro/gnostics/","page":"Diagnostics","title":"Diagnostics","text":"Data input","category":"page"},{"location":"generated/intro/gnostics/","page":"Diagnostics","title":"Diagnostics","text":"path = dirname(dirname(Base.current_project()))\ninclude(path * \"/docs/example_data.jl\")\nevts = DataFrame(CSV.File(path * \"/data/events.csv\"))\npositions_128 = JLD2.load_object(path * \"/data/positions_128.jld2\")\nerps_fix_32 = JLD2.load_object(path * \"/data/erps_fix_32.jld2\")\npattern_detection_values_32 = example_data(\"pattern_detection_values_32\");\ndesired_conditions = [\"duration\", \"fix_avgpos_x\", \"fix_avgpos_y\", \"fix_avgpupilsize\"]","category":"page"},{"location":"generated/intro/gnostics/","page":"Diagnostics","title":"Diagnostics","text":"Plotting","category":"page"},{"location":"generated/intro/gnostics/","page":"Diagnostics","title":"Diagnostics","text":"inter_toposeries_image(\n    filter(row -> row.condition in desired_conditions, pattern_detection_values_32),\n    evts,\n    erps_fix_32,\n    1:151;\n    positions = positions_128[1:32],\n    figure_configs = (; size = (1500, 700)),\n)","category":"page"},{"location":"generated/intro/gnostics/","page":"Diagnostics","title":"Diagnostics","text":"","category":"page"},{"location":"generated/intro/gnostics/","page":"Diagnostics","title":"Diagnostics","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#ERPgnostics-Documentation","page":"ERPgnostics highlights","title":"ERPgnostics Documentation","text":"","category":"section"},{"location":"#Hello-World!","page":"ERPgnostics highlights","title":"Hello World!","text":"","category":"section"}]
}
